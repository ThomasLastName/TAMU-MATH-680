# todo NN in base numpy, and example using tensorflow



# ~~~ Tom Winckelman wrote this; maintained at: https://github.com/ThomasLastName/labs_680

exercise_mode = False   # ~~~ see https://github.com/ThomasLastName/labs_680?tab=readme-ov-file#usage
install_assist = False  # ~~~ see https://github.com/ThomasLastName/labs_680/blob/main/README.md#assisted-installation-for-environments-other-than-colab-recommended


### ~~~
## ~~~ Boiler plate stuff; basically just loading packages
### ~~~

#
# ~~~ Standard python libraries
import torchvision
import torch
from torch import nn
from collections import OrderedDict


from quality_of_life.my_torch_utils import convert_Dataset_to_Tensors, convert_Tensors_to_Dataset
from quality_of_life.my_base_utils import support_for_progress_bars


### ~~~
## ~~~ EXERCISE 1 of?: Download MNIST
###  ~~~

#
# ~~~ set the parent directory where you want to store data on your computer
my_data_directory = 7
my_data_directory = "C:\\Users\\thoma\\AppData\\Local\\Programs\\Python\\Python310\\pytorch_data"


MNIST_train = torchvision.datasets.MNIST(
        root = my_data_directory,   # where to look for the data on your computer (if the data isn't there and download=True, then it will download the data and put it there)
        train = True,               # specify whether you want the training data or the test data
        download = True,            # give permission to download the data if pytorch doesn't find it in `root`
        transform = torchvision.transforms.ToTensor()   # convert whatever weird format .jpeg data comes into an actual mathematical object
    )

MNIST_test = torchvision.datasets.MNIST(
        root = my_data_directory,   # where to look for the data on your computer (if the data isn't there and download=True, then it will download the data and put it there)
        train = False,              # specify whether you want the training data or the test data
        download = True,            # give permission to download the data if pytorch doesn't find it in `root`
        transform = torchvision.transforms.ToTensor()   # convert whatever weird format .jpeg data comes into an actual mathematical object
    )



### ~~~
## ~~~ EXERCISE 2 of?: Get the actual data out of pytorch's Dataset class
### ~~~

if exercise_mode:
    #
    # ~~~ write a function that excracts the actual matrices from `MNIST_train` and `MNIST_test`
    def get_data(object_of_class_Dataset):
        # HINT objects of class torch.utils.data.Dataset aren't matrices but you can still " do [index] to them;" try printing `MNIST_train[0]`
        return None
else:
    from quality_of_life.my_torch_utils import convert_Dataset_to_Tensors as get_data


X_test, y_test = convert_Dataset_to_Tensors(MNIST_test) # ~~~ correct implementation
my_X_test, my_y_test = get_data(MNIST_test)             # ~~~ my implementation
assert (X_test==my_X_test).min() and (y_test==my_y_test).min()  # ~~~ check that the results are identical




### ~~~
## ~~~ EXERCISE 3 of?: Build a torch.utils.data.Dataset out of plain old numbers
### ~~~

if exercise_mode:
    #
    # ~~~ write a function that excracts the actual matrices from `MNIST_train` and `MNIST_test`
    def assemble_data(object_of_class_Dataset):
        # HINT this is highly googlable
        return None
else:
    #
    # ~~~ load my left inverse to get_data; note that my implelemntation is *not* a bijection: we have get(assemble(v))=v, but *not* assemble(get(w))=w
    from quality_of_life.my_torch_utils import convert_Tensors_to_Dataset as assemble_data



my_X, my_y = get_data(assemble_data(X_test,y_test))     # ~~~ build a torch.utils.data.Dataset and then call the tensors that we built it out of
assert (X_test==my_X).min() and (y_test==my_y).min()    # ~~~ check that we got back exactly what we started with



model = nn.Sequential(
            nn.Flatten(),
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10),
            nn.Softmax(dim=1)
        )

